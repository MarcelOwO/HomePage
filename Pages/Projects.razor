@page "/Projects"

@inject IJSRuntime JsRuntime

<MudGrid flex-wrap Class=" d-flex">
    <MudItem flex-wrap Class="d-flex" xs="12">
        <MudPaper Class="pa-10 ma-5 d-flex" Elevation="23" flex-wrap-reverse gap-4>
            <MudStack AlignItems="AlignItems.Start">
                <MudText Typo="Typo.h3" Color="Color.Primary">Disclaimer</MudText>
                <MudText Typo="Typo.body2">
                    Just a small disclaimer that this part of the website is still work in progress and I usually update this very sparely. Probably will add a overlay with a proper explanation for each project in the future.
                    I also only list project that I have worked on in my free time. Projects that I would have done because of university are not listed here, as most are mostly for learning and have no outside use,
                    for example is a hangman game made in mips assembly, a compile for a simple language in java, various c,c++ and java projects for learning the language, some smaller unity projects and implementing some network protocols in c being the most notable ones.
                </MudText>
            </MudStack>
        </MudPaper>
    </MudItem>
    @foreach (var project in _projects.Reverse())
    {
        <MudItem flex-wrap Class="d-flex" xs="6">
            <MudPaper id=@project.Key Class="pa-10 ma-5 d-flex" Elevation="23" flex-wrap-reverse gap-4>
                <MudButton Href="@project">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h3" Color="Color.Primary">@project.Key</MudText>
                        <MudText Typo="Typo.body2">
                            @project.Value
                        </MudText>
                    </MudStack>
                </MudButton>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

<MudOverlay @bind-Visible="_visible" DarkBackground AutoClose="true" OnClosed="OnOverlayClosed"/>

@code
{

    private bool _visible = false;

    public void OpenOverlay()
    {
        _visible = true;
        StateHasChanged();
    }

    public void OnOverlayClosed()
    {
    }




    private DotNetObjectReference<Projects>? _dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetHelper = DotNetObjectReference.Create(this);
            foreach (var project in _projects)
            {
                await JsRuntime.InvokeVoidAsync("detectScroll", project.Key, _dotNetHelper);
            }
        }
    }
}