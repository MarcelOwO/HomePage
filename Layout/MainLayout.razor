@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime



<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_myCustomTheme"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="23">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                       OnClick="() => DrawerToggle()"/>
        <MudSpacer/>
        <MudToggleIconButton 
            Icon="@Icons.Material.Filled.LightMode"
            ToggledIcon="@Icons.Material.Filled.DarkMode"
            Color="Color.Inherit" ToggledChanged="ToggleDarkMode"/>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Elevation="23">
        <NavMenu/>
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
        <MudAppBar Bottom="true" Elevation="1" Dense="true" Class="px-4">
            <MudText Typo="Typo.body2">© @DateTime.Now.Year Marcel Sigl</MudText>
            <MudSpacer/>
            <MudText Typo="Typo.body2">Made with Blazor WASM</MudText>
        </MudAppBar>
    </MudMainContent>
    <MudScrollToTop Style="z-index:2001;">
        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small"/>
    </MudScrollToTop>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private bool _isDarkMode;

    private MudThemeProvider? _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedTheme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme-preference");
            if (!string.IsNullOrEmpty(storedTheme) && bool.TryParse(storedTheme, out var isDark))
            {
                _isDarkMode = isDark;
            }
            else
            {
                _isDarkMode = await _mudThemeProvider?.GetSystemPreference()!;
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "theme-preference", _isDarkMode.ToString());
            }

            StateHasChanged();
        }
    }

    readonly MudTheme _myCustomTheme = new()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#44cdfa",
            Secondary = "#ffffff",
            AppbarBackground = "#818181",
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#fcc98b",
            Secondary = "#99a3b8",
            AppbarBackground = "#13171f",
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "300px"
        }
    };


    private async Task ToggleDarkMode(bool arg)
    {
        _isDarkMode = arg;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "theme-preference", _isDarkMode.ToString());
    }

}

